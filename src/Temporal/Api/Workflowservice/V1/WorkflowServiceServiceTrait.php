<?php
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: temporal/api/workflowservice/v1/service.proto

namespace Temporal\Api\Workflowservice\V1;

/**
 * WorkflowService API is exposed to provide support for long running applications.  Application is expected to call
 *  StartWorkflowExecution to create an instance for each instance of long running workflow.  Such applications are expected
 *  to have a worker which regularly polls for WorkflowTask and ActivityTask from the WorkflowService.  For each
 *  WorkflowTask, application is expected to process the history of events for that session and respond back with next
 *  commands.  For each ActivityTask, application is expected to execute the actual logic for that task and respond back
 *  with completion or failure.  Worker is expected to regularly heartbeat while activity task is running.
 */
trait WorkflowServiceServiceTrait
{
    final public function getMethods()
    {
        return [
            "/temporal.api.workflowservice.v1.WorkflowService/RegisterNamespace" => "doRegisterNamespace",
            "/temporal.api.workflowservice.v1.WorkflowService/DescribeNamespace" => "doDescribeNamespace",
            "/temporal.api.workflowservice.v1.WorkflowService/ListNamespaces" => "doListNamespaces",
            "/temporal.api.workflowservice.v1.WorkflowService/UpdateNamespace" => "doUpdateNamespace",
            "/temporal.api.workflowservice.v1.WorkflowService/DeprecateNamespace" => "doDeprecateNamespace",
            "/temporal.api.workflowservice.v1.WorkflowService/StartWorkflowExecution" => "doStartWorkflowExecution",
            "/temporal.api.workflowservice.v1.WorkflowService/GetWorkflowExecutionHistory" => "doGetWorkflowExecutionHistory",
            "/temporal.api.workflowservice.v1.WorkflowService/PollWorkflowTaskQueue" => "doPollWorkflowTaskQueue",
            "/temporal.api.workflowservice.v1.WorkflowService/RespondWorkflowTaskCompleted" => "doRespondWorkflowTaskCompleted",
            "/temporal.api.workflowservice.v1.WorkflowService/RespondWorkflowTaskFailed" => "doRespondWorkflowTaskFailed",
            "/temporal.api.workflowservice.v1.WorkflowService/PollActivityTaskQueue" => "doPollActivityTaskQueue",
            "/temporal.api.workflowservice.v1.WorkflowService/RecordActivityTaskHeartbeat" => "doRecordActivityTaskHeartbeat",
            "/temporal.api.workflowservice.v1.WorkflowService/RecordActivityTaskHeartbeatById" => "doRecordActivityTaskHeartbeatById",
            "/temporal.api.workflowservice.v1.WorkflowService/RespondActivityTaskCompleted" => "doRespondActivityTaskCompleted",
            "/temporal.api.workflowservice.v1.WorkflowService/RespondActivityTaskCompletedById" => "doRespondActivityTaskCompletedById",
            "/temporal.api.workflowservice.v1.WorkflowService/RespondActivityTaskFailed" => "doRespondActivityTaskFailed",
            "/temporal.api.workflowservice.v1.WorkflowService/RespondActivityTaskFailedById" => "doRespondActivityTaskFailedById",
            "/temporal.api.workflowservice.v1.WorkflowService/RespondActivityTaskCanceled" => "doRespondActivityTaskCanceled",
            "/temporal.api.workflowservice.v1.WorkflowService/RespondActivityTaskCanceledById" => "doRespondActivityTaskCanceledById",
            "/temporal.api.workflowservice.v1.WorkflowService/RequestCancelWorkflowExecution" => "doRequestCancelWorkflowExecution",
            "/temporal.api.workflowservice.v1.WorkflowService/SignalWorkflowExecution" => "doSignalWorkflowExecution",
            "/temporal.api.workflowservice.v1.WorkflowService/SignalWithStartWorkflowExecution" => "doSignalWithStartWorkflowExecution",
            "/temporal.api.workflowservice.v1.WorkflowService/ResetWorkflowExecution" => "doResetWorkflowExecution",
            "/temporal.api.workflowservice.v1.WorkflowService/TerminateWorkflowExecution" => "doTerminateWorkflowExecution",
            "/temporal.api.workflowservice.v1.WorkflowService/ListOpenWorkflowExecutions" => "doListOpenWorkflowExecutions",
            "/temporal.api.workflowservice.v1.WorkflowService/ListClosedWorkflowExecutions" => "doListClosedWorkflowExecutions",
            "/temporal.api.workflowservice.v1.WorkflowService/ListWorkflowExecutions" => "doListWorkflowExecutions",
            "/temporal.api.workflowservice.v1.WorkflowService/ListArchivedWorkflowExecutions" => "doListArchivedWorkflowExecutions",
            "/temporal.api.workflowservice.v1.WorkflowService/ScanWorkflowExecutions" => "doScanWorkflowExecutions",
            "/temporal.api.workflowservice.v1.WorkflowService/CountWorkflowExecutions" => "doCountWorkflowExecutions",
            "/temporal.api.workflowservice.v1.WorkflowService/GetSearchAttributes" => "doGetSearchAttributes",
            "/temporal.api.workflowservice.v1.WorkflowService/RespondQueryTaskCompleted" => "doRespondQueryTaskCompleted",
            "/temporal.api.workflowservice.v1.WorkflowService/ResetStickyTaskQueue" => "doResetStickyTaskQueue",
            "/temporal.api.workflowservice.v1.WorkflowService/QueryWorkflow" => "doQueryWorkflow",
            "/temporal.api.workflowservice.v1.WorkflowService/DescribeWorkflowExecution" => "doDescribeWorkflowExecution",
            "/temporal.api.workflowservice.v1.WorkflowService/DescribeTaskQueue" => "doDescribeTaskQueue",
            "/temporal.api.workflowservice.v1.WorkflowService/GetClusterInfo" => "doGetClusterInfo",
            "/temporal.api.workflowservice.v1.WorkflowService/ListTaskQueuePartitions" => "doListTaskQueuePartitions",
        ];
    }

    final public function getLastErrno()
    {
        throw new \RuntimeException(__METHOD__.' can only called in client');
    }

    final public function getLastError()
    {
        throw new \RuntimeException(__METHOD__.' can only called in client');
    }

    final public function doRegisterNamespace(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RegisterNamespaceRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RegisterNamespace($request);
    }
    final public function doDescribeNamespace(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\DescribeNamespaceRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->DescribeNamespace($request);
    }
    final public function doListNamespaces(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\ListNamespacesRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ListNamespaces($request);
    }
    final public function doUpdateNamespace(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\UpdateNamespaceRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->UpdateNamespace($request);
    }
    final public function doDeprecateNamespace(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\DeprecateNamespaceRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->DeprecateNamespace($request);
    }
    final public function doStartWorkflowExecution(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\StartWorkflowExecutionRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->StartWorkflowExecution($request);
    }
    final public function doGetWorkflowExecutionHistory(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\GetWorkflowExecutionHistoryRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->GetWorkflowExecutionHistory($request);
    }
    final public function doPollWorkflowTaskQueue(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\PollWorkflowTaskQueueRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->PollWorkflowTaskQueue($request);
    }
    final public function doRespondWorkflowTaskCompleted(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RespondWorkflowTaskCompletedRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RespondWorkflowTaskCompleted($request);
    }
    final public function doRespondWorkflowTaskFailed(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RespondWorkflowTaskFailedRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RespondWorkflowTaskFailed($request);
    }
    final public function doPollActivityTaskQueue(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\PollActivityTaskQueueRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->PollActivityTaskQueue($request);
    }
    final public function doRecordActivityTaskHeartbeat(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RecordActivityTaskHeartbeatRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RecordActivityTaskHeartbeat($request);
    }
    final public function doRecordActivityTaskHeartbeatById(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RecordActivityTaskHeartbeatByIdRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RecordActivityTaskHeartbeatById($request);
    }
    final public function doRespondActivityTaskCompleted(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RespondActivityTaskCompletedRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RespondActivityTaskCompleted($request);
    }
    final public function doRespondActivityTaskCompletedById(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RespondActivityTaskCompletedByIdRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RespondActivityTaskCompletedById($request);
    }
    final public function doRespondActivityTaskFailed(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RespondActivityTaskFailedRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RespondActivityTaskFailed($request);
    }
    final public function doRespondActivityTaskFailedById(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RespondActivityTaskFailedByIdRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RespondActivityTaskFailedById($request);
    }
    final public function doRespondActivityTaskCanceled(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RespondActivityTaskCanceledRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RespondActivityTaskCanceled($request);
    }
    final public function doRespondActivityTaskCanceledById(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RespondActivityTaskCanceledByIdRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RespondActivityTaskCanceledById($request);
    }
    final public function doRequestCancelWorkflowExecution(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RequestCancelWorkflowExecutionRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RequestCancelWorkflowExecution($request);
    }
    final public function doSignalWorkflowExecution(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\SignalWorkflowExecutionRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->SignalWorkflowExecution($request);
    }
    final public function doSignalWithStartWorkflowExecution(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\SignalWithStartWorkflowExecutionRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->SignalWithStartWorkflowExecution($request);
    }
    final public function doResetWorkflowExecution(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\ResetWorkflowExecutionRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ResetWorkflowExecution($request);
    }
    final public function doTerminateWorkflowExecution(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\TerminateWorkflowExecutionRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->TerminateWorkflowExecution($request);
    }
    final public function doListOpenWorkflowExecutions(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\ListOpenWorkflowExecutionsRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ListOpenWorkflowExecutions($request);
    }
    final public function doListClosedWorkflowExecutions(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\ListClosedWorkflowExecutionsRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ListClosedWorkflowExecutions($request);
    }
    final public function doListWorkflowExecutions(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\ListWorkflowExecutionsRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ListWorkflowExecutions($request);
    }
    final public function doListArchivedWorkflowExecutions(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\ListArchivedWorkflowExecutionsRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ListArchivedWorkflowExecutions($request);
    }
    final public function doScanWorkflowExecutions(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\ScanWorkflowExecutionsRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ScanWorkflowExecutions($request);
    }
    final public function doCountWorkflowExecutions(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\CountWorkflowExecutionsRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->CountWorkflowExecutions($request);
    }
    final public function doGetSearchAttributes(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\GetSearchAttributesRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->GetSearchAttributes($request);
    }
    final public function doRespondQueryTaskCompleted(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\RespondQueryTaskCompletedRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->RespondQueryTaskCompleted($request);
    }
    final public function doResetStickyTaskQueue(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\ResetStickyTaskQueueRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ResetStickyTaskQueue($request);
    }
    final public function doQueryWorkflow(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\QueryWorkflowRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->QueryWorkflow($request);
    }
    final public function doDescribeWorkflowExecution(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\DescribeWorkflowExecutionRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->DescribeWorkflowExecution($request);
    }
    final public function doDescribeTaskQueue(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\DescribeTaskQueueRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->DescribeTaskQueue($request);
    }
    final public function doGetClusterInfo(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\GetClusterInfoRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->GetClusterInfo($request);
    }
    final public function doListTaskQueuePartitions(\Lv\Grpc\Session $session, $data)
    {
        $request = new \Temporal\Api\Workflowservice\V1\ListTaskQueuePartitionsRequest;

        if ($session->getMetadata('content-type') === 'application/grpc+proto') {
            $request->mergeFromString($data);
        } else {
            $request->mergeFromJsonString($data);
        }

        $request->context($session);

        return $this->ListTaskQueuePartitions($request);
    }
}
